import PDFDocument from 'pdfkit';
import { SpeechAnalysis, AudioFile, User } from '@shared/schema';

export async function generateAnalysisPDF(
  analysis: SpeechAnalysis, 
  audioFile: AudioFile, 
  user: User
): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      // Create a new PDF document
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50,
        },
      });

      const buffers: Buffer[] = [];
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfData = Buffer.concat(buffers);
        resolve(pdfData);
      });
      doc.on('error', reject);

      // Header
      doc.fontSize(20)
         .font('Helvetica-Bold')
         .text('Speech Analysis Report', 50, 50);

      doc.fontSize(12)
         .font('Helvetica')
         .text(`Generated on: ${new Date().toLocaleDateString()}`, 50, 80)
         .text(`Analysis ID: ${analysis.id}`, 50, 95);

      // Patient Information
      doc.fontSize(16)
         .font('Helvetica-Bold')
         .text('Patient Information', 50, 130);

      doc.fontSize(12)
         .font('Helvetica')
         .text(`Name: ${user.firstName || ''} ${user.lastName || ''}`, 50, 155)
         .text(`Email: ${user.email}`, 50, 170)
         .text(`Account Type: ${user.accountType}`, 50, 185);

      // Audio File Information
      doc.fontSize(16)
         .font('Helvetica-Bold')
         .text('Audio File Information', 50, 220);

      doc.fontSize(12)
         .font('Helvetica')
         .text(`File Name: ${audioFile.originalName}`, 50, 245)
         .text(`File Size: ${(audioFile.fileSize / 1024 / 1024).toFixed(2)} MB`, 50, 260)
         .text(`Duration: ${audioFile.duration ? `${audioFile.duration.toFixed(1)}s` : 'N/A'}`, 50, 275);

      // Analysis Results
      doc.fontSize(16)
         .font('Helvetica-Bold')
         .text('Analysis Results', 50, 310);

      const results = analysis.analysisResults as any;
      
      doc.fontSize(12)
         .font('Helvetica')
         .text(`Fluency Score: ${analysis.fluencyScore?.toFixed(1) || 'N/A'}/10`, 50, 335)
         .text(`Stuttering Events: ${analysis.stutteringEvents || 'N/A'}`, 50, 350)
         .text(`Speech Rate: ${analysis.speechRate?.toFixed(0) || 'N/A'} WPM`, 50, 365)
         .text(`Average Pause Duration: ${analysis.averagePauseDuration?.toFixed(2) || 'N/A'}s`, 50, 380)
         .text(`Confidence Level: ${analysis.confidenceLevel ? `${(analysis.confidenceLevel * 100).toFixed(1)}%` : 'N/A'}`, 50, 395);

      // Detected Events
      if (analysis.detectedEvents && Array.isArray(analysis.detectedEvents)) {
        doc.fontSize(16)
           .font('Helvetica-Bold')
           .text('Detected Events', 50, 430);

        let yPos = 455;
        analysis.detectedEvents.forEach((event: any, index) => {
          doc.fontSize(11)
             .font('Helvetica')
             .text(`${index + 1}. ${event.timestamp || 'N/A'} - ${event.type || 'Unknown'} (${event.duration || 'N/A'}s)`, 60, yPos);
          yPos += 15;
        });
        yPos += 20;
      }

      // Transcription
      if (results?.transcription) {
        const transcriptionY = doc.y + 30;
        
        doc.fontSize(16)
           .font('Helvetica-Bold')
           .text('Audio Transcription', 50, transcriptionY);

        doc.fontSize(11)
           .font('Helvetica')
           .text(results.transcription, 50, transcriptionY + 25, {
             width: 495,
             align: 'justify',
             lineGap: 5,
           });
      }

      // Add new page if needed for recommendations
      doc.addPage();

      // Professional Recommendations
      doc.fontSize(16)
         .font('Helvetica-Bold')
         .text('Clinical Recommendations', 50, 50);

      const recommendations = generateRecommendations(analysis);
      
      doc.fontSize(12)
         .font('Helvetica')
         .text(recommendations, 50, 75, {
           width: 495,
           align: 'justify',
           lineGap: 5,
         });

      // Footer
      const pageHeight = doc.page.height;
      doc.fontSize(10)
         .font('Helvetica')
         .text('This report was generated by SpeechPath AI Analysis Platform', 50, pageHeight - 30)
         .text('© 2025 SpeechPath. All rights reserved.', 50, pageHeight - 15);

      doc.end();

    } catch (error) {
      reject(error);
    }
  });
}

function generateRecommendations(analysis: SpeechAnalysis): string {
  const fluencyScore = analysis.fluencyScore || 0;
  const stutteringEvents = analysis.stutteringEvents || 0;
  const speechRate = analysis.speechRate || 0;

  let recommendations = '';

  if (fluencyScore < 6) {
    recommendations += '• Focus on fluency-enhancing techniques such as easy onset and light articulatory contacts.\n\n';
  }

  if (stutteringEvents > 10) {
    recommendations += '• Consider implementing stuttering modification techniques to reduce frequency of disfluencies.\n\n';
  }

  if (speechRate < 120) {
    recommendations += '• Work on increasing speech rate while maintaining fluency through rate control exercises.\n\n';
  } else if (speechRate > 180) {
    recommendations += '• Practice rate reduction techniques to improve overall speech clarity and fluency.\n\n';
  }

  recommendations += '• Continue regular practice with speech therapy exercises.\n\n';
  recommendations += '• Monitor progress through consistent audio recordings and analysis.\n\n';
  recommendations += '• Consider joining a speech therapy support group for additional practice opportunities.';

  return recommendations;
}